// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package repository

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createManyPlayers = `-- name: CreateManyPlayers :batchexec
insert into players (first_name, last_name, name, division, pdga_number, city, state_prov, country)
values (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
on conflict (pdga_number) do nothing
`

type CreateManyPlayersBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateManyPlayersParams struct {
	FirstName  string
	LastName   string
	Name       string
	Division   string
	PdgaNumber int64
	City       pgtype.Text
	StateProv  pgtype.Text
	Country    pgtype.Text
}

func (q *Queries) CreateManyPlayers(ctx context.Context, arg []CreateManyPlayersParams) *CreateManyPlayersBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.FirstName,
			a.LastName,
			a.Name,
			a.Division,
			a.PdgaNumber,
			a.City,
			a.StateProv,
			a.Country,
		}
		batch.Queue(createManyPlayers, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateManyPlayersBatchResults{br, len(arg), false}
}

func (b *CreateManyPlayersBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateManyPlayersBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
